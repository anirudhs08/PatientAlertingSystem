//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PatientRegistration.PatientRegistrationDischarge {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientDetails", Namespace="http://schemas.datacontract.org/2004/07/PatientRegistrationandDischarge")]
    [System.SerializableAttribute()]
    public partial class PatientDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BedNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BloodGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DiagnosisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DoctorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BedNo {
            get {
                return this.BedNoField;
            }
            set {
                if ((this.BedNoField.Equals(value) != true)) {
                    this.BedNoField = value;
                    this.RaisePropertyChanged("BedNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BloodGroup {
            get {
                return this.BloodGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.BloodGroupField, value) != true)) {
                    this.BloodGroupField = value;
                    this.RaisePropertyChanged("BloodGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Contact {
            get {
                return this.ContactField;
            }
            set {
                if ((this.ContactField.Equals(value) != true)) {
                    this.ContactField = value;
                    this.RaisePropertyChanged("Contact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Diagnosis {
            get {
                return this.DiagnosisField;
            }
            set {
                if ((object.ReferenceEquals(this.DiagnosisField, value) != true)) {
                    this.DiagnosisField = value;
                    this.RaisePropertyChanged("Diagnosis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Doctor {
            get {
                return this.DoctorField;
            }
            set {
                if ((object.ReferenceEquals(this.DoctorField, value) != true)) {
                    this.DoctorField = value;
                    this.RaisePropertyChanged("Doctor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientName {
            get {
                return this.PatientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameField, value) != true)) {
                    this.PatientNameField = value;
                    this.RaisePropertyChanged("PatientName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PatientRegistrationDischarge.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterPatient", ReplyAction="http://tempuri.org/IService1/RegisterPatientResponse")]
        string RegisterPatient(string inputString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterPatient", ReplyAction="http://tempuri.org/IService1/RegisterPatientResponse")]
        System.Threading.Tasks.Task<string> RegisterPatientAsync(string inputString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DischargePatient", ReplyAction="http://tempuri.org/IService1/DischargePatientResponse")]
        string DischargePatient(string patientid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DischargePatient", ReplyAction="http://tempuri.org/IService1/DischargePatientResponse")]
        System.Threading.Tasks.Task<string> DischargePatientAsync(string patientid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllPatient", ReplyAction="http://tempuri.org/IService1/SelectAllPatientResponse")]
        PatientRegistration.PatientRegistrationDischarge.PatientDetails[] SelectAllPatient();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectAllPatient", ReplyAction="http://tempuri.org/IService1/SelectAllPatientResponse")]
        System.Threading.Tasks.Task<PatientRegistration.PatientRegistrationDischarge.PatientDetails[]> SelectAllPatientAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectPatient", ReplyAction="http://tempuri.org/IService1/SelectPatientResponse")]
        string SelectPatient(string patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectPatient", ReplyAction="http://tempuri.org/IService1/SelectPatientResponse")]
        System.Threading.Tasks.Task<string> SelectPatientAsync(string patientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : PatientRegistration.PatientRegistrationDischarge.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<PatientRegistration.PatientRegistrationDischarge.IService1>, PatientRegistration.PatientRegistrationDischarge.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string RegisterPatient(string inputString) {
            return base.Channel.RegisterPatient(inputString);
        }
        
        public System.Threading.Tasks.Task<string> RegisterPatientAsync(string inputString) {
            return base.Channel.RegisterPatientAsync(inputString);
        }
        
        public string DischargePatient(string patientid) {
            return base.Channel.DischargePatient(patientid);
        }
        
        public System.Threading.Tasks.Task<string> DischargePatientAsync(string patientid) {
            return base.Channel.DischargePatientAsync(patientid);
        }
        
        public PatientRegistration.PatientRegistrationDischarge.PatientDetails[] SelectAllPatient() {
            return base.Channel.SelectAllPatient();
        }
        
        public System.Threading.Tasks.Task<PatientRegistration.PatientRegistrationDischarge.PatientDetails[]> SelectAllPatientAsync() {
            return base.Channel.SelectAllPatientAsync();
        }
        
        public string SelectPatient(string patientId) {
            return base.Channel.SelectPatient(patientId);
        }
        
        public System.Threading.Tasks.Task<string> SelectPatientAsync(string patientId) {
            return base.Channel.SelectPatientAsync(patientId);
        }
    }
}
